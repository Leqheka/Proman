// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  EDITOR
  VIEWER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships    Membership[]
  assignedCards  CardAssignment[]
  comments       Comment[]
  activities     Activity[]
  notifications  Notification[]
  boardsOwned    Board[]
}

model Board {
  id        String   @id @default(cuid())
  title     String
  background String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String
  owner   User     @relation(fields: [ownerId], references: [id])

  lists   List[]
  cards   Card[]
  members Membership[]
  labels  Label[]
  rules   AutomationRule[]
  activity Activity[]

  @@index([ownerId])
}

model List {
  id      String @id @default(cuid())
  title   String
  order   Int    @default(0)

  boardId String
  board   Board  @relation(fields: [boardId], references: [id])

  cards   Card[]

  @@index([boardId])
}

model Card {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int      @default(0)
  archived    Boolean  @default(false)
  dueDate     DateTime?

  listId String
  list   List   @relation(fields: [listId], references: [id])

  boardId String
  board   Board  @relation(fields: [boardId], references: [id])

  labels      CardLabel[]
  attachments Attachment[]
  comments    Comment[]
  checklists  Checklist[]
  assignments CardAssignment[]
  activity    Activity[]

  @@index([listId])
  @@index([boardId])
}

model Label {
  id      String @id @default(cuid())
  name    String
  color   String

  boardId String
  board   Board  @relation(fields: [boardId], references: [id])

  cards   CardLabel[]

  @@index([boardId])
}

model CardLabel {
  cardId  String
  labelId String

  card  Card  @relation(fields: [cardId], references: [id])
  label Label @relation(fields: [labelId], references: [id])

  @@id([cardId, labelId])
}

model Checklist {
  id     String @id @default(cuid())
  title  String

  cardId String
  card   Card   @relation(fields: [cardId], references: [id])

  items  ChecklistItem[]

  @@index([cardId])
}

model ChecklistItem {
  id          String  @id @default(cuid())
  title       String
  completed   Boolean @default(false)

  checklistId String
  checklist   Checklist @relation(fields: [checklistId], references: [id])

  @@index([checklistId])
}

model Attachment {
  id       String @id @default(cuid())
  url      String
  filename String
  size     Int
  type     String

  cardId String
  card   Card   @relation(fields: [cardId], references: [id])

  @@index([cardId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  parentId String?
  parent   Comment? @relation("Thread", fields: [parentId], references: [id])
  replies  Comment[] @relation("Thread")

  cardId String
  card   Card   @relation(fields: [cardId], references: [id])

  userId String
  author User   @relation(fields: [userId], references: [id])

  @@index([cardId])
  @@index([userId])
}

model Membership {
  userId String
  boardId String
  role   Role   @default(EDITOR)

  user  User  @relation(fields: [userId], references: [id])
  board Board @relation(fields: [boardId], references: [id])

  @@id([userId, boardId])
}

model CardAssignment {
  userId String
  cardId String

  user User @relation(fields: [userId], references: [id])
  card Card @relation(fields: [cardId], references: [id])

  @@id([userId, cardId])
}

model Activity {
  id        String   @id @default(cuid())
  type      String
  details   Json
  createdAt DateTime  @default(now())

  boardId String?
  cardId  String?
  userId  String?

  board Board? @relation(fields: [boardId], references: [id])
  card  Card?  @relation(fields: [cardId], references: [id])
  user  User?  @relation(fields: [userId], references: [id])

  @@index([boardId])
  @@index([cardId])
  @@index([userId])
}

model AutomationRule {
  id      String @id @default(cuid())
  name    String
  config  Json
  enabled Boolean @default(true)

  boardId String
  board   Board  @relation(fields: [boardId], references: [id])

  @@index([boardId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  data      Json
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}
